package cn.udslance.ilearningx;

import org.junit.jupiter.api.Test;

import java.util.Arrays;

/**
 * @program: RoadToNice
 * @description: 给定一个设备编号区间[start, end]，包含4或18的编号都不能使用，如：418、148、718不能使用，108可用。
 * @author: Udslance
 * @create: 2022-07-14 17:25
 **/
public class ilearningx17 {
    // 现给定长度为168(7*24)的整数数组，表示一个周期(假设从周一00:00到周日24:00)的每小时历史数据，最佳升级时间窗选择规则如下：
    //
    // 时间窗内累计用户访问量必须小于等于给定的容忍值。
    // 时间窗必须是连续的x个小时，最大的x即为最佳升级时间窗，且不超过7*24。
    // 时间窗允许跨周期，例如当前周期的第167小时到下一周期的第166小时，是一个长度为168的时间窗。
    // 请计算最佳升级时间窗，并返回其开始时间和结束时间的数组下标。 如果存在多个最佳升级时间窗时，返回开始时间下标最小的一个。
    private static int[] getBestTimeWindow(int[] pvByHourWeekly, int pvErrorTolerance) {
        // 在此补充你的代码
        // 思路：双指针
        int[] dou = new int[336];
        System.arraycopy(pvByHourWeekly, 0, dou, 0, 168);
        System.arraycopy(pvByHourWeekly, 0, dou, 168, 168);
        int left = -1;
        int right = 0;
        int x = 0;
        int sum = pvByHourWeekly[0];
        int[] res = new int[]{-1, -1};
        while (left < 168 && right < 336) {
            if (sum >= 0 && sum <= pvErrorTolerance) {
                // 如果当前的访问量小于等于容忍值
                // 如果将当前区间长度更长，则可以更新区间
                int curX = right - left;
                if (curX > x && curX < 169) {
                    x = curX;
                    res[0] = left + 1;
                    res[1] = right % 168;
                }
                // 右指针可以右移
                right++;
                if (right == 336) {
                    break;
                }
                sum += dou[right];
            } else {
                // 如果当前的访问量大于容忍值
                // 则左指针需要右移
                sum -= dou[left + 1];
                left++;
            }
        }
        return res;
    }

    @Test
    public void test() {
        int[] tmp = new int[]{1181752412,543415221,531530463,234578117,1042880611,665595500,40235803,341476205,598181603,654392401,1144538484,792938707,377482833,526157682,1189739783,1273889670,982432920,167585328,1017054374,977968560,629801530,240362933,838591093,1187257411,428734257,811390594,256224032,871526575,1109752321,868987433,746551207,273537101,977687504,938965948,978573453,1271456209,691036223,175829997,330905006,1405265302,204400075,936587958,146547411,328705521,619876647,686184391,248589455,744795832,1099047966,476250253,154532931,586830117,181672590,1196888644,1081730556,66354216,1174997414,1330100010,98202898,580075595,501234663,539136754,1248199481,1426610732,1255046159,141130310,380287612,84991174,976707862,1304706077,1340390911,1144481420,431478337,455196048,1138583725,1030150637,537132404,1120922559,1286704546,849659359,166366785,992451891,1168426438,1250864282,129141751,258618284,985019739,311373230,1310356326,728245636,75867287,1124812227,7574921,9500565,488126316,714435397,793308335,679708633,1266562204,617614488,389139562,1330452995,150303435,473471356,322757347,184203138,556622471,1327945471,569731953,56693312,1012697229,813889471,1052032931,980976278,1294772756,371037572,1345941563,1382772253,642697146,784870685,956877429,817657735,91617563,598976762,414048262,1266729947,68707558,1108294117,1206308634,1382239511,118150888,1336455885,70425099,506718225,659788550,259608592,1428424306,1366101736,112869362,261171093,523788894,364343131,1177536214,50948868,349905789,666279488,265420269,1132149796,1373960800,190166465,919220793,1295209418,1393203209,547631461,666841627,1117413576,1417715730,887715804,738341911,1278829516,352854592,1019668586,1323010899,268196851,386117020,1193488254,844001586,1283591035};
        int pvErrorTolerance = 1428424307;
        int[] res = getBestTimeWindow(tmp, pvErrorTolerance);
        System.out.println(Arrays.toString(res));

    }

}
